---
title: API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - plaintext: Text
  - python: Python
  - java: Java
  - javascript: Node.js

toc_footers:
  - <a href='https://doc.qfapi.com/'>View the open API documentation</a>
  - <a href='https://github.com/QFPay/QFPAY_Oversea/tree/master/Code'>Visit our GitHub page</a>

includes:
- test-images.md.erb

search: true
---

# Introduction

Welcome to the QF Pay open API SDK. To get started, please review the [Developer Instructions](#developer-instructions) below. Further information regarding system integration is available on our [official API documentaion](https://doc.qfapi.com/) and on our [GitHub Page](https://github.com/QFPay/QFPAY_Oversea/tree/master/Code).

We have language bindings in Python, Java and Node.js! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right corner.


## Developer Instructions

<aside class="notice"> If the <code>mchid</code> is provided, it is mandatory to submit the <code>mchid</code> when calling the API (unless otherwise specified). On the contrary, if <code>mchid</code> is not provided, merchants shall not pass the <code>mchid</code> field in the API request.
</aside>

In order to use the QF Pay open API, you must have active API credentials, including an **app_code** and **client_key**. In case of technical issues please contact **technical.support@qfpay.global**. 

There are seperate environments available for application testing and development as well as production.

Please note that transactions conducted in the sandbox environment will not have settlement. Therefore, make sure to test with small amounts and process refunds using the API refund endpoint or Merchant APP on the same day as the original transaction day.

Each merchant will be provided with a set of app code and key with or without <code>mchid</code>. Merchants with multiple branches will usually be supplied with app code, key and <code>mchid</code>. The hashed <code>mchid</code> is used to identify shops and outlets. Otherwise, only app code and key will be given.

### Encoding Description

All return parameters from API are in <code>UTF-8</code> code unless otherwise noted.


## Environments

<aside class="warning">
Remember to immediately refund transactions that were made in the sandbox environment.
</aside>

### API Environments

Environment Name | URL 
--------- | ------- 
Sandbox | https://openapi-test.qfpay.com 
China Mainland | https://openapi.qfpay.com 
Hong Kong | https://openapi-hk.qfapi.com
Japan | https://openapi-jp.qfapi.com
Thailand | https://openapi-th.qfapi.com 
Dubai | https://openapi-db.qfapi.com
Singapore | https://openapi-sg.qfapi.com
Australia | https://openapi-au.qfapi.com
Indonesia | https://openapi-id.qfapi.com
Europe | https://openapi-eur.qfapi.com


## Signature Generation

```plaintext
Select Python, Java or Node.js for code instructions.
```


```python
# Create signature
def make_req_sign(data, key):
    keys = list(data.keys())
    keys.sort()
    p = []
    for k in keys: 
        v = data[k]
        p.append('%s=%s'%(k,v))
    unsign_str = ('&'.join(p) + key).encode("utf-8")
    s = hashlib.md5(unsign_str).hexdigest()
    return s.upper()


# Body payload
txamt = '10' # In USD,EUR,etc. Cent
txcurrcd = 'EUR'
pay_type = '800101' # Alipay CPM = 800108 , MPM = 800101
auth_code='283854702356157409' # CPM only
out_trade_no = random_string
txdtm = current_time
goods_name = 'test1'   
auth_code = '280438849930815813'
key = client_key
mchid = ZaMVg***** # ID is provided during merchant onboarding


#data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name, 'udid': udid, 'auth_code': auth_code, 'mchid': mchid, 'auth_code': auth_code}
data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name, 'mchid': mchid}


r = requests.post(environment+"/trade/v1/payment",data=data,headers={'X-QF-APPCODE':app_code,'X-QF-SIGN':make_req_sign(data, key)})

print(make_req_sign(data, key))

```


```java
/* 
This class is the utility for QFPay Payment API. 
Note:This is just an example.
getMd5Value:
After do the string manipulation, like:abc=value&bad=value&bcd=valueKey
This method generates MD5 signature using hexadecimal format.
getDataString:
This method pass in with the map, and generate the string like:abc=value&bad=value&bcd=value.
*/
public class QFPayUtils {
    
    public static String getMd5Value(String input) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(input.getBytes( "UTF-8" ));
            StringBuffer sb = new StringBuffer();
            for (int i = 0; i < array.length; i++) {
                sb.append( String.format( "%02x", array[i]));
            }
            return sb.toString().toUpperCase();
        } catch ( NoSuchAlgorithmException | UnsupportedEncodingException e) {
            return null;
        }
    }
   
    public static <T> String getDataString(Map resultMap) {
        Map<String, String> map = new TreeMap<String, String>(
                new Comparator<String>() {
                    public int compare(String obj1, String obj2) {
                        return obj1.compareTo(obj2);
                    }
                });

        Iterator<Map.Entry<String, String>> it = resultMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> entry = it.next();
            map.put(entry.getKey(), entry.getValue());
        }

        StringBuilder sb = new StringBuilder();
        it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, String> entry = it.next();
            sb.append(entry.getKey()+"="+entry.getValue()+"&");
        }
        return sb.deleteCharAt(sb.length() - 1).toString();
    }


}
```


```javascript
// Enter Client Credentials
const environment = 'https://openapi-test.qfpay.com'
const app_code = 'D5589D2A1F2E42A9A60C37**********'
const client_key = '0E32A59A8B454940A2FF39*********'

// Generate Timestamp
var dateTime = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
console.log(dateTime)

// Body Payload
const key = client_key
var tradenumber = String(Math.round(Math.random() * 1000000000))
console.log(tradenumber)

var payload = {
'txamt': '10', // In USD,EUR,etc. Cent
'txcurrcd': 'EUR',
'pay_type': '800101', // Alipay CPM = 800108 , MPM = 800101
'out_trade_no': tradenumber,
'txdtm': dateTime,
'mchid': 'ZaMVg*****'
};

// Signature Generation
const ordered = {};
Object.keys(payload).sort().forEach(function(key) {
  ordered[key] = payload[key] });
console.log(ordered)

var str = [];
for (var p in ordered)
if (ordered.hasOwnProperty(p)) {
str.push((p) + "=" + (ordered[p]));
}
var string = str.join("&")+client_key;
console.log(string)

const crypto = require('crypto')
var hashed = crypto.createHash('md5').update(string).digest('hex')
console.log(hashed)
```


> The above command returns JSON structured like this:

```json
{
"B3B251B202801388BE4AC8E5537B81B1"
}
```


<aside class="success">
Always submit the signature in the HTTP header <code>X-QF-SIGN</code> unless noted otherwise.
</aside>

**Step 1:** Sort all parameters in ascending order according to parameter names

Parameter list: abc=value1 bcd=value2 bad=value3
Sort result: abc=value1 bad=value3 bcd=value2

**Step 2:** Connect all parameters with ‘&’,and get the string to be signed

abc=value1&bad=value3&bcd=value2

**Step 3:** Combine the string with <code>client_key</code> from QFPay.

abc=value1&bad=value3&bcd=value2Key

**Step 4:** Sign the string from step 3 with MD5 or SHA256. We recommend to use SHA256.

MD5(abc=value1&bad=value3&bcd=value2Key)
HASH(“SHA256”, abc=value1&bad=value3&bcd=value2Key)

**Step 5:** Request API with the signature

Save the signature in the http header field <code>X-QF-SIGN</code> unless otherwise specified in this document.


### Request Description


<aside class="notice">
The API will return response content in JSON format. We encourage developers to verify the signature in the response header in order to ensure message integrity.
</aside>

Field | Description 
--------- | ------- 
Character | <code>UTF-8</code>  
method | **POST/ GET** (Depends on individual API function)
Content-type | <code>application/x-www-form-urlencoded</code>

### Required Parameter Settings in HTTP Header to Request the API

Field | Mandatory | Description
--------- | ------- | ------- 
<code>X-QF-APPCODE</code> | Yes | App code assigned to the merchant 
<code>X-QF-SIGN</code> | Yes | Signature generated according to the signature formulation method described above 
<code>X-QF-SIGNTYPE</code> | No | Signature algorithm used in the signature. If SHA256 is used , developer must pass the value as “SHA256”. The default value is MD5 if this field is not passed to the API. 


# Payments

## Payment Codes

<aside class="warning">
Verify that your onboarding credentials allow for the selected <code>pay_type</code>.
</aside>

### PayType Table


```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;


public class Requests{
    public static String sendPostRequest(String inputURL,String data,String appcode,String key) {
        String resp="";
        try {

            // Send the request
            URL url = new URL(inputURL);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setRequestProperty("Accept-Charset", "utf-8");
            conn.setRequestProperty("X-QF-APPCODE", appcode);
            conn.setRequestProperty("X-QF-SIGN",QFPayUtils.getMd5Value(data+key));


            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());

            // Write parameters
            writer.write(data);
            writer.flush();

            // Get the response
            StringBuffer answer = new StringBuffer();
            BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                answer.append(line);
            }
            writer.close();
            reader.close();

            resp=answer.toString();



        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return resp;



    }

}
```


Code | Description 
--------- | ------- 
800008 | Customer Presented QR Code Payment (CPM) for WeChat, Alipay, UNIONPAY Quick Pass
800101 | Alipay Merchant Presented QR Code Payment in store (MPM) 
800107 | Alipay Service Window H5 Payment 
800108 | Alipay Customer Presented QR Code Payment (CPM) 
800201 | WeChat Merchant Presented QR Code Payment (MPM) 
800207 | WeChat JSAPI Payment (Also known as WeChat Official Account Payment) 
800208 | WeChat Customer Presented QR Code Payment (CPM) 
800213 | WeChat Mini-Program Payment 
800701 | UNIONPAY Quick Pass Merchant Presented QR Code Payment (MPM) 
800708 | UNIONPAY Quick Pass Customer Presented QR Code Payment (CPM) 
801008 | WeChat Hong Kong Customer Presented QR Code Payment (CPM) (For WeChat Hong Kong merchants) 
801010 | WeChat Hong Kong In-App Payment (Applicable to merchants applying to WeChat Hong Kong) 
801101 | Alipay Merchant Presented Online QR Code Payment (Overseas Merchant) 
801107 | Alipay Online WAP Payment (Overseas Merchant) 
801208 | LINEPAY Customer Presented QR Code Payment 
801301 | LINEPAY Online Payments
801307 | LINEPAY Merchant Presented QR Code Payment 
801408 | AIRPAY Customer Presented QR Code Payment 
801501 | Alipay Merchant Presented Online QR Code Payment (HK Merchant) 
801510 | Alipay In-App Payment (HK Merchant) 
801512 | Alipay Online WAP Payment (HK Merchant) 
801701 | NETSPAY 
801801 | Alipay Customer Presented QR Code Pre-authorization
801802 | Alipay Merchant Presented QR Code Pre-authorization 
801908 | Origami Customer Presented QR Code Payment 
802001 | HK FPS Merchant Presented QR Code Payment (MPM) 
802201 | AIRPAY Merchant Presented QR Code Payment 
802301 | PayNow Merchant Presented QR Code Payment 


## API Endpoint for Payments

```plaintext
Request Header:

{
  Content-Type: application/x-www-form-urlencoded;
  X-QF-APPCODE: D5589D2A1F2E42A9A60C37**********
  X-QF-SIGN: 6FB43AC29175B4602FF95F8332028F19
}

Request Body:

{
  mchid=ZaMVg*****&out_trade_no=01234567890123&pay_type=800101&txamt=10&txcurrcd=EUR&txdtm=2019-12-25 14:21:28
}

```


```python
#coding=utf8
import urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse, hashlib
import requests
import datetime
import string

# Enter Client Credentials
environment = 'https://openapi-test.qfpay.com'
app_code = 'D5589D2A1F2E42A9A60C37*********'
client_key = '0E32A59A8B454940A2FF39**********'


# Create parameter values for data payload
current_time = datetime.datetime.now().replace(microsecond=0)                                

print(current_time)

# Create signature
def make_req_sign(data, key):
    keys = list(data.keys())
    keys.sort()
    p = []
    for k in keys: 
        v = data[k]
        p.append('%s=%s'%(k,v))
    unsign_str = ('&'.join(p) + key).encode("utf-8")
    s = hashlib.md5(unsign_str).hexdigest()
    return s.upper()


# Body payload
txamt = '10' #In USD,EUR,etc. Cent
txcurrcd = 'EUR'
pay_type = '800101' # Alipay CPM = 800108 , MPM = 800101
auth_code='283854702356157409' # CPM only
out_trade_no = '01234567890123'
txdtm = current_time
goods_name = 'test1'   
auth_code = '280438849930815813'
mchid = 'ZaMVg*****'
key = client_key


#data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name, 'udid': udid, 'auth_code': auth_code, 'mchid': mchid, 'auth_code': auth_code}
data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'mchid': mchid}

r = requests.post(environment+"/trade/v1/payment",data=data,headers={'X-QF-APPCODE':app_code,'X-QF-SIGN':make_req_sign(data, key)})

print(r.json())
```

```java
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;


public class TestMain {
    public static void main(String args[]){
        String appcode="D5589D2A1F2E42A9A60C37*********";
        String key="0E32A59A8B454940A2FF39*********";
        String mchid="ZaMVg*****";

        String pay_type="800101";
        String out_trade_no= "01234567890123";
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date=df.format(new Date());
        String txdtm=date;
        String txamt="10";
        String txcurrcd="EUR";

        Map<String, String> unsortMap = new HashMap<>();
        unsortMap.put("mchid", mchid);
        unsortMap.put("pay_type", pay_type);
        unsortMap.put("out_trade_no", out_trade_no);
        unsortMap.put("txdtm", txdtm);
        unsortMap.put("txamt", txamt);
        unsortMap.put("txcurrcd", txcurrcd);
        //unsortMap.put("product_name", product_name);
        //unsortMap.put("valid_time", "300");

        String data=QFPayUtils.getDataString(unsortMap);
        System.out.println("Data:\n"+data+key);
        String md5Sum=QFPayUtils.getMd5Value(data+key);
        System.out.println("Md5 Value:\n"+md5Sum);

        String url="https://openapi-test.qfpay.com";
        String resp= Requests.sendPostRequest(url+"/trade/v1/payment", data, appcode,key);
        System.out.println(resp);
    }
}
```

```javascript
// Enter Client Credentials
const environment = 'https://openapi-test.qfpay.com'
const app_code = 'D5589D2A1F2E42A9A60C37*********'
const client_key = '0E32A59A8B454940A2FF39*********'

// Generate Timestamp
var dateTime = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
console.log(dateTime)

// Body Payload
const key = client_key
var tradenumber = String(Math.round(Math.random() * 1000000000))
console.log(tradenumber)

var payload = {
'txamt': '10', // In USD,EUR,etc. Cent
'txcurrcd': 'EUR',
'pay_type': '800101', // Alipay CPM = 800108 , MPM = 800101
'out_trade_no': tradenumber,
'txdtm': dateTime,
'mchid': 'ZaMVg*****'
};

// Signature Generation
const ordered = {};
Object.keys(payload).sort().forEach(function(key) {
  ordered[key] = payload[key] });
console.log(ordered)

var str = [];
for (var p in ordered)
if (ordered.hasOwnProperty(p)) {
str.push((p) + "=" + (ordered[p]));
}
var string = str.join("&")+client_key;
console.log(string)

const crypto = require('crypto')
var hashed = crypto.createHash('md5').update(string).digest('hex')
console.log(hashed)


// API Request
var request = require("request");
request({
  uri: environment+"/trade/v1/payment",
  headers: {
    'X-QF-APPCODE': app_code,
    'X-QF-SIGN': hashed
  },
  method: "POST",
  form: payload,
  }, 
  function(error, response, body) {
  console.log(body);
});
```

> The above command returns JSON structured like this:

```json
{
    "txdtm": "2019-12-25 14:21:28",
    "qrcode": "https://qr.alipay.com/bax01781r3pu4fjaqazt4091",
    "pay_type": "800101",
    "resperr": "success",
    "out_trade_no": "01234567890123",
    "syssn": "20191225000200020060996533",
    "sysdtm": "2019-12-25 14:22:37",
    "paydtm": "2019-12-25 14:22:37",
    "txcurrcd": "EUR",
    "respmsg": "",
    "cardcd": "",
    "udid": "qiantai2",
    "txamt": "10",
    "respcd": "0000",
    "chnlsn": ""
}
```

### HTTP Request

`POST ../trade/v1/payment`

<aside class="notice">
Listed below are the most common parameters for the payment endpoint. Please refer to the payment scenario applicable to you for additional parameters.
</aside>

### Public Payment Request Parameters

Parameter name | Parameter code | Mandatory | Type | Description
--------- | -------- | --------- | ------- | ------- 
Payment amount | <code>txamt</code> | Yes | Int(11) | Amount of the transaction. Unit in cents (i.e. 100 = $1) 
Currency | <code>txcurrcd</code> | Yes | String(3) | Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB
Payment type | <code>pay_type</code> | Yes | String(6) | Please refer to the section [Payment Codes](#payment-codes) for a complete list of payment types
API Order Number | <code>out_trade_no</code> | Yes | String(128)| External transaction number / Merchant platform transaction number: This parameter must be unique for each payment and refund request under the same merchant account in the system.
Request transaction time | <code>txdtm</code> | Yes | String(20) | Transaction time fomat：<br> YYYY-MM-DD hh:mm:ss 
Product name identification | <code>goods_name</code> | No | String(64) | Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. Cannot be empty for app payment. 
QF Pay merchant number | <code>mchid</code> | No | String(16) | May or may not be given to merchant. If MCHID is given, it is mandatory to provide the MCHID .On the contrary, if MCHID is not provided, merchants shall not pass the MCHID field in the API request. 
Time zone | <code>txzone</code> | No | String(5) | Transaction Time zone: Record of the transaction in local time, default time zone is Beijing time UTC+8. 
Device ID | <code>udid</code> | No | String(40) |  Unique transaction device ID. Will be displayed on merchant portal. 


### Public Payment Response Parameters

Parameter name | Parameter code | Type | Description 
--------- | -------- | --------- | ------- 
Payment type | <code>pay_type</code> | String(6) | 
System transaction time | <code>sysdtm</code> | String(20) | Format：YYYY-MM-DD hh:mm:ss 
Request transaction time | <code>txdtm</code> | String(20) | Format：YYYY-MM-DD hh:mm:ss  
Response message | <code>resperr</code> | String(128) |  
Payment amount | <code>txamt</code> | Int(11) |  
Other message information | <code>respmsg</code> | String(128) |  
External transaction number | <code>out_trade_no</code> | String(128) | External transaction number  
QFPay transaction number | <code>syssn</code> | String(40) | 
Return code | <code>respcd</code> | String(4) | 0000 = Request successful. <br> 1143/1145 = merchants are required to continue to query the transaction result. <br> All other return codes indicate transaction failure. Please refer to the page [Transaction Status Codes](#transaction-status-codes) for a complete list of response codes. 



## Transaction Status Codes

| Return code | Description                                               |
| ---------- | ------------------------------------------------------------ |
| 0000       | Transaction successful    |
| 1104       | Request parameter error (1104)  | 
| 1108       | Signature error (1108)    |
| 1143       | The order has not been paid for, the password is currently being entered (1143)   |
| 1145       | Please wait while processing (1145)    |
| 1150       | Your billing method is T0 and does not support canceling transactions. (1150)    |
| 1201       | Insufficient balance, please use a different payment method (1201)   |
| 1202       | Incorrect or expired payment code, please show the correct payment code or refresh the payment code and retry (1202)   |
| 1203       | Account error, please confirm the payment account is available (1203)  |
| 1204       | Bank error, please confirm that the payment account is available (1204)  |
| 1205       | The transaction failed. Please try again later (1205)  |
| 1212       | Please use the UnionPay overseas payment code (1212)  |
| 1241       | The store does not exist or the status is incorrect. Do not conduct payments (1241)  |
| 1242       | The store has not been configured correctly, unable to conduct payments (1242)  |
| 1243       | The store has been disabled. Do not conduct payments, contact the owner to confirm (1243)  |
| 1250       | The transaction is forbidden. For more information please contact QFPay Customer Service Team (1250) |
| 1251       | The store has not been configured correctly, we are currently working to fix this problem (1251)  |
| 1254       | A problem occured. We are currently resolving the issue. (1254)  |
| 1260       | The order has already been paid for, please confirm the transaction result before conducting more transactions (1260) |
| 1261       | The order has not been paid for, please confirm the transaction result before conducting more transactions (1261)  |
| 1262       | The order has been refunded, please confirm the order status before conducting more transactions (1262)  |
| 1263       | The order has been cancelled, please confirm the order status before conducting more transactions (1263) |
| 1264       | The order has been closed, please confirm the order status before conducting more transactions (1264)  |
| 1265       | The transaction cannot be refunded. Refunds for transactions between 11:30pm to 0:30am and special promotions cannot be processed. (1265)  |
| 1266       | The transaction amount is wrong, please confirm the order status (1266)  |
| 1267       | The order information does not match, please confirm the order status (1267) |
| 1268       | The order does not exist, please confirm the order status (1268) |
| 1269       | Today's unsettled transaction amount is insufficient. Refunds cannot be processed. Please confirm that the balance is sufficient (1269) |
| 1270       | This currency does not support partial refunds (1270) |
| 1271       | The selected transaction does not support partial refunds (1271) |
| 1272       | The refund amount is greater than the maximum amount that can be refunded for the original transaction (1272) |
| 1294       | The transaction may be non-compliant and has been prohibited by the bank (1294) |
| 1295       | The connection is slow, waiting for a network response (1295) |
| 1296       | The connection is slow, waiting for a network response. Please try again later or use other payment methods (1296) |
| 1297       | The banking system is busy. Please try again later or use other payment methods (1297) |
| 1298       | The connection is slow, waiting for a network response. In case you have already paid, do not repeat the payment. Please confirm the result later (1298) |
| 2005       | The customer payment code is incorrect or has expired, please refresh and restart the transaction process (2005) |
| 2011       | Transaction serial number repeats (2011) |


## Transaction Notes

<aside class="notice">
This Endpoint is only available to merchants who do not pass in the <code>mchid</code>
</aside>

Merchant can use this interface to add remarks to a transaction. This remarks value will be displayed in the Merchant Management System (MMS) and on the transaction report.

## API Endpoint for Transaction Notes


```plaintext
Request Header:

{
  Content-Type: application/x-www-form-urlencoded;
  X-QF-APPCODE: D5589D2A1F2E42A9A60C37**********
  X-QF-SIGN: 6FB43AC29175B4602FF95F8332028F19
}

Request Body:

{
  code=A6A49A6******DFE94EA95032&note=add_note&syssn=20190722000200020081075691
}
```

> The above command returns JSON structured like this:

```json
{
  "resperr":"Success",
  "respcd":"0000",
  "respmsg":"",
  "data":
{
  "syssn":"20190722000200020081084545"
}
}
```

### HTTP Request

`POST ../trade/v1/add_note`

### Request Parameters

|Parameter name|Parameter code|Mandatory|Parameter type|Description|
|----    |---|----- |-----   |-----   |
|Merchant app code| <code>code</code>   |Yes   |String(32)   | Provided by QF Pay |
|Transaction number | <code>syssn</code> | Yes |String(40) | QFPay transaction number, returned by the system once payment is completed |
|Remarks| <code>note</code>   |Yes   |String(200）   | Remarks value  |


### Response Parameters

|Parameter code|Parameter type | Parameter name |Description|
|----    |---|-----   |-----   |-----   |
| <code>resperr</code>   |String(128)   |Transaction result description   |  | 
| <code>respmsg</code>   |String(128)  |Error message   |    | 
| <code>respcd</code>    |String(4)  |Return code   |   0000 = Interface call succeeded | 
| <code>syssn</code>   |  String(40)   |Error message   | Transaction number returned by the system when payment is completed | 



## Consumer Present Mode (CPM)

### CPM Process Flow Diagram

<a href="https://sdk.qfapi.com/images/cpm_process.jpg" target="_blank">   
![CPM process-flow](/images/cpm_process.jpg)</a>


### CPM API Request

```plaintext
Request Header:

{
  Content-Type: application/x-www-form-urlencoded; 
  charset=UTF-8,
  Content-Length: 218,
  Chunked: false
  X-QF-APPCODE:A6A49A66B4C********94EA95032
  X-QF-SIGN:3b020a6349646684ebeeb0ec2cd3d1fb
}

Request Body:

{
  auth_code=13485790*******88557&goods_name=qfpay&mchid=R1zQrTdJnn&out_trade_no=Native201907221520536a25477909&pay_type=800208&txamt=10&txcurrcd=HKD&txdtm=2019-07-22 15:20:54&udid=AA
}
```

> The above command returns JSON structured like this:

```json
{
  "pay_type": "800208", 
  "sysdtm": "2019-07-22 15:20:54",  
  "paydtm": "2019-07-22 15:20:56",  
  "txdtm": "2019-07-22 15:20:54", 
  "udid": "AA", 
  "txcurrcd": "HKD",  
  "txamt": "10", 
  "resperr": "交易成功", 
  "respmsg": "OK", 
  "out_trade_no": "Native201907221520536a25477909", 
  "syssn": "20190722000300020081074842", 
  "respcd": "0000", 
  "chnlsn": "4200000384201907223585006133",  
  "cardcd": "oxLIkxJfclPOY1kYHPtPjwYA7OVQ"
}
```

`POST ../trade/v1/payment`

The customer generates a dynamic QR code in their Alipay / WeChat Pay wallet and presents it to the cashier for scanning. This szenario applies to offline payments only.


### Request Parameters

|Parameter name | Parameter code | Mandatory | Parameter type | Description |
|:----    |:---|:----- |-----   |----   |
|Public payment parameters | — | — |— |— |
|WeChat/ Alipay authorization code | <code>auth_code</code> | Yes | String(128) |  Input by the user   | 

### Response Parameters

|Parameter name | Parameter code | Mandatory | Parameter type | Description |
|:----    |:---|:----- |-----   |----   |
|Public payment parameters | — | — |— |— |


## Merchant Present Mode (MPM)

### MPM Process Flow Diagram

<a href="https://sdk.qfapi.com/images/mpm_process.jpg" target="_blank">   
![MPM process-flow](/images/mpm_process.jpg)</a>


### MPM API Request

```plaintext
Request Header:

{
  Content-Type: application/x-www-form-urlencoded; 
  charset=UTF-8,
  Content-Length: 218,
  Chunked: false, 
  X-QF-APPCODE: A6A49A66B4C********94EA95032,
  X-QF-SIGN: 3b020a6349646684ebeeb0ec2cd3d1fb
}

Request Body:

{
  expired_time=10&goods_name=qfpay&limit_pay=no_credit&mchid=R1zQrTdJnn&out_trade_no=Native20190722145741431794b8d1&pay_type=800201&txamt=20&txcurrcd=HKD&txdtm=2019-07-22 14:57:42&udid=AA
}
```

> The above command returns JSON structured like this:

```json
{
  "sysdtm": "2019-07-17 14:48:36",
  "paydtm": "2019-07-17 14:48:36",
  "txcurrcd": "HKD",
  "respmsg": "",
  "qrcode": "weixin://wxpay/bizpayurl?pr=Xu51stU",
  "pay_type": "800201",
  "cardcd": "", 
  "udid": "my_udid",
  "txdtm": "2019-07-17 14:48:04",
  "txamt": "2",
  "resperr": "\u4ea4\u6613\u6210\u529f",
  "out_trade_no": "15633460848421208064",
  "syssn": "20190717074500020000003400",
  "respcd": "0000",
  "chnlsn": ""
}
```

`POST ../trade/v1/payment`

The merchant generates a dynamic QR code based on the Alipay / WeChat Pay protocol and presents it to the customer. The user opens their Alipay / WeChat Pay wallet and scans the displayed QRC in order to complete payment. This szenario applies to offline as well as online payments, for instance on websites.


### Request Parameters

|Parameter name| Parameter code|Mandatory|Parameter type|Description|
|:----    |:---|:----- |-----   |-----   |
|Public payment parameter | —  | — | — | — |
|Payment mark | <code>pay_tag</code>  | No |     String(16) | The default value is ALIPAYHK Alipay <br/>Continental version of the value: ALIPAYCN <br/>801501 - Alipay Hong Kong PC scan code <br/>801512 - Alipay Hong Kong Wap payment <br/>801510 - Alipay Hong Kong APP payment |
|Transaction expiration time |  <code>expired_time</code>  | No | String(3) | Unit: minute, minimum 5 minutes, maximum 120 minutes of support <br/>800201 -WeChat scan code <br/>800101 - Alipay scan code <br/>801512 - Alipay Hong Kong Wap payment <br/>801501 - Alipay Hong Kong scan code <br/>801107 - Alipay overseas Wap payment <br/>801101 - Alipay overseas scan code <br/>801010 - WeChat Hong Kong APP <br/>801510 - Alipay Hong Kong APP |
|Designated payment method    |<code>limit_pay</code>|No |String   |The parameter value is specified as no_credit, and credit card payment is prohibited. This setting only applies to mainland China.  |

### Response Parameters

|Parameter code|Secondary parameter code|Parameter type|Parameter name|Description|
|:----    |:---|:----- |-----   |-----   |
|QR Code |  |String(512) | QR code link   | |
|Public payment parameter | —  | — | — | — |


# Asynchronous Notifications

The request parameters from Asynchronous Notifications may include additional parameters in future versions. Developers must ensure that their programs can support new parameters. In addition, developers can get the latest development documentation from this website. If you have any questions, please feel free to send email to **technical.support@qfpay.global** for more information.

### Description

Upon successful payment and refund, QFPay API will send an asynchronous notification message to the URL address defined by merchant. Merchant can develop an end-point to receive this notification message and update the status of a transaction accordingly. We recommend merchants to use the query function of the API in conjunction with the asynchronous notification end point to retireve the payment status. Asynchronous notifications only works ports 80 and 443 due to security requriement.

## Asynchronous Notification Rules

1) The merchant will only be notified after the payment or refund transaction has been successful.

2) Please send an email with your notification endpoint URL address to **technical.support@qfpay.global** for the asynchronous notification setup. Our technical support team will setup the provided URL for you.

3) Upon receiving the notification, merchant shall verifiy the message integrity according to signature verification procedure described below. If the verification is successful, the system is required to response with status code 200 OK and the string SUCCESS in the response body.

4) If our API does not receive a response with status code 200 OK and SUCCESS message, we will send out asynchronous notifications at the following intervals after the first message; 2m, 10m, 10m, 60m, 2h, 6h, 15h. Notifications will stop when the response with status code 200 OK and SUCCESS message is received.

5) One set of app code and key can be setup with one notification URL address only. Patners shall use one notification URL address for their sub-merchant.

6) Method: `POST content-type:application/json`

## Signature Verification

**Step 1:** Obtain the signature from the X-QF-SIGN field in the http request header

**Step 2:** Attach the key to the end of the request body received by the end point

**Step 3:** Sign the string from step 2 with MD5 algorithm

**Step 4:** Compare the MD5 result with the signature from X-QF-SIGN, return an http response with status code 200 OK and SUCCESS in the response body if the verification is successful




## Request Body Parameters of Asynchronous Notifications

Parameter | Mandatory | Type | Description  
--------- | ------- | --------- | ------- 
<code>notify_type</code> | Yes | String | Notification Type: payment/ refund 
<code>syssn</code> | Yes | String(40) | QFPay Transaction Number 
<code>out_trade_no</code> | Yes | String(128) | API Order Number, this is the external transaction number defined by our partner
<code>pay_type</code> | Yes | String(6) | Pay_type value, please refer to Code Instruction section 
<code>txdtm</code> | Yes | String(20) | Order creation time supplied by merchant in payment request 
<code>txamt</code> | Yes | Int(11) | Transaction amount 
<code>respcd</code> | Yes | String(4) | Transaction status - Must be 0000 in async notification message 
<code>sysdtm</code> | Yes | String(20) | Transaction creation time in system 
<code>paydtm</code> | Yes | String(20) | Payment time of the transaction 
<code>cancel</code> | Yes | String  | Transaction cancel status: <br> 0 = Not cancelled <br> 1 = For CPM: Transaction reversed or refunded successfully <br> 2 = For MPM: Transaction canceled successfully <br> 3 = Transaction refunded <br> 4 = Alipay Preauth order finished <br> 5 = Transaction partially refunded
<code>cardcd</code> | No | String | For WeChat and AliPay only. The user id dedicated to the payment account. 
<code>goods_name</code> | No | String | Goods name or marking 
<code>status</code> | Yes | String | 1 = payment success 
<code>txcurrcd</code> | Yes | String(3) | Currency: Hong Kong Dollar: HKD ; Chinese Yuan: CNY 
<code>mchid</code> | No |  String(16) | Hashed merchant ID (Agents must provide this value) 
<code>chnlsn</code> | No | String | Transaction number from payment channel 
<code>cash_fee</code> | Yes | Int | Actual payment amount by user = transaction amount - discounts 
<code>cash_fee_type</code> | Yes | String | Actual payment currency: CNY 
<code>chnlsn2</code> | No | String | Additional transaction number from payment channel (if applicable) 



# Transaction Enquiry

<aside class="warning"> If the <code>mchid</code> is provided, it is mandatory to submit the <code>mchid</code> when calling the API (unless otherwise specified). On the contrary, if <code>mchid</code> is not provided, merchants shall not pass the <code>mchid</code> field in the API request.
</aside>

## API Endpoint for Transaction Enquiry

```plaintext
Request Header:

{
  Content-Type: application/x-www-form-urlencoded;
  X-QF-APPCODE: D5589D2A1F2E42A9A60C37**********
  X-QF-SIGN: 6FB43AC29175B4602FF95F8332028F19
}

Request Body:

{
  mchid=ZaMVg*****&syssn=20191227000200020061752831&start_time=2019-12-27 00:00:00&end_time=2019-12-27 23:59:59
}
```


```python
import urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse, hashlib
import requests
from hashids import Hashids
import datetime
import string
import random

# Enter Client Credentials
environment = 'https://openapi-test.qfpay.com'
app_code = 'D5589D2A1F2E42A9A60C37**********'
client_key = '0E32A59A8B454940A2FF39**********'

# Create parameter values for data payload
current_time = datetime.datetime.now().replace(microsecond=0)         
random_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=32))                       


# Create signature
def make_req_sign(data, key):
    keys = list(data.keys())
    keys.sort()
    p = []
    for k in keys: 
        v = data[k]
        p.append('%s=%s'%(k,v))
    unsign_str = ('&'.join(p) + key).encode("utf-8")
    s = hashlib.md5(unsign_str).hexdigest()
    return s.upper()


# Body payload
mchid = 'ZaMVg*****' #(Agent ID, Merchant ID)
syssn = '20191227000200020061752831' #Search by transaction number only
out_trade_no = '2019122722001411461404119764' #Search by out_trade_no only
start_time = '2019-12-27 00:00:00'
end_time = '2019-12-27 23:59:59'
key = client_key


#data ={'mchid': mchid, 'syssn': syssn, 'out_trade_no': out_trade_no, 'start_time': start_time, 'end_time': end_time}
data ={'mchid': mchid, 'syssn': syssn}

r = requests.post(environment+"/trade/v1/query",data=data,headers={'X-QF-APPCODE':app_code,'X-QF-SIGN':make_req_sign(data, key)})

print(make_req_sign(data, key))  
print(r.json())
```

```java
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;


public class Enquiry {
    public static void main(String args[]){
        String appcode="D5589D2A1F2E42A9A60C37**********";
        String key="0E32A59A8B454940A2FF39*********";
        String mchid="ZaMVg*****"; // Only Agents must provide the mchid

        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date=df.format(new Date());
        String txdtm=date;

        String syssn="20191227000300020061662295";
        String start_time = "2019-12-27 00:00:00";
        String end_time = "2019-12-27 23:59:59";

        Map<String, String> unsortMap = new HashMap<>();
        unsortMap.put("mchid", mchid);
        unsortMap.put("syssn", syssn);

        String data=QFPayUtils.getDataString(unsortMap);
        System.out.println("Data:\n"+data+key);
        String md5Sum=QFPayUtils.getMd5Value(data+key);
        System.out.println("Md5 Value:\n"+md5Sum);

        String url="https://openapi-test.qfpay.com";
        String resp= Requests.sendPostRequest(url+"/trade/v1/query", data, appcode,key);
        System.out.println(resp);
    }
}
```

```javascript
// Enter Client Credentials
const environment = 'https://openapi-test.qfpay.com'
const app_code = 'D5589D2A1F2E42A9A60C37**********'
const client_key = '0E32A59A8B454940A2FF39**********'

// Generate Timestamp
var dateTime = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
console.log(dateTime)

// Body Payload
const key = client_key
var tradenumber = String(Math.round(Math.random() * 1000000000))
console.log(tradenumber)

var payload = {
'syssn': '20191231000300020063521806',
'start_time': '2019-12-27 00:00:00',
'end_time': '2019-12-31 23:59:59',
'mchid': 'ZaMVg*****'
};

// Signature Generation
const ordered = {};
Object.keys(payload).sort().forEach(function(key) {
  ordered[key] = payload[key] });
console.log(ordered)

var str = [];
for (var p in ordered)
if (ordered.hasOwnProperty(p)) {
str.push((p) + "=" + (ordered[p]));
}
var string = str.join("&")+client_key;
console.log(string)

const crypto = require('crypto')
var hashed = crypto.createHash('md5').update(string).digest('hex')
console.log(hashed)


// API Request
var request = require("request");
request({
  uri: environment+"/trade/v1/query",
  headers: {
    'X-QF-APPCODE': app_code,
    'X-QF-SIGN': hashed
  },
  method: "POST",
  form: payload,
  }, 
  function(error, response, body) {
  console.log(body);
});
```

> The above command returns JSON structured like this:

```json
{
"respmsg": "", 
"resperr": "请求成功", 
"respcd": "0000", 
"data": 
[{
"cardtp": "5", 
"cancel": "0", 
"pay_type": "800101", 
"order_type": "payment", 
"clisn": "038424", 
"txdtm": "2019-12-27 10:39:39", 
"goods_detail": "", 
"out_trade_no": "CHZ7D61JN1ANJF2R2K1I7TXP2JTCEWBL", 
"syssn": "20191227000200020061752831", 
"sysdtm": "2019-12-27 10:40:24", 
"paydtm": "2019-12-27 10:42:18", 
"goods_name": "", 
"txcurrcd": "EUR", 
"chnlsn2": "", 
"udid": "qiantai2", 
"userid": "2605489", 
"txamt": "10", 
"chnlsn": "2019122722001411461404119764", 
"respcd": "0000", 
"goods_info": "", 
"errmsg": "success"
}], 
"page": 1, 
"page_size": 10
}
```


After making a payment or refund request, the merchant can use the query interface to obtain the transaction status.

The merchant can use the query interface to enquire transaction status of one or multiple transactions. In case the interface does not return <code>syssn</code> in time, use <code>out_trade_no</code> as a condition to query the transaction status.

If the merchant would like to enquire transaction in a month, they can provide start_time and end_time (records will be filtered according to the time in sysdtm, and the interval must be within 1 month). Otherwise, it is recommended to include the <code>syssn</code> parameter as a query condition.


### Request Parameters

|Parameter name| Parameter code|Mandatory|Parameter type|Description|
|----    |---|----- |-----   |-----   |
|Merchant number | <code> mchid </code> | For Agents |String(16) | If MCHID is given, it is mandatory to provide the <code>mchid.</code>On the contrary, if <code> mchid</code> is not provided, merchants shall not pass the <code>mchid</code> field in the API request.|
|QFPay transaction number | <code> syssn </code> |No |String(128) | Multiple entries are seperated by commas   |
|API order number | <code> out_trade_no </code> |No |String(128) | External transaction number / Merchant platform transaction number, multiple entries are seperated by commas   |
|Payment type | <code> pay_type </code> |No |String(6) | Multiple entries are seperated by commas   |
|Transaction return code | <code> respcd </code> |No |String(4) | Returns all orders with return code status by default   |
|Starting time | <code> start_time </code> |No |String(20) | It is ignored when <code>syssn</code> or <code>out_trade_number</code> is provided. The default date time is the start of current month. <br>Format: YYYY-MM-DD hh&#58;mm:ss   |
|End Time | <code> end_time </code> |No | String(20) | It is ignored when <code>syssn</code> or <code>out_trade_number</code> is provided. The default date time is the end of current month. <br/>Format: YYYY-MM-DD hh&#58;mm:ss   |
|Time zone | <code> txzone </code> |No | String(5) | Used to record the local order time. The default is Beijing time UTC +08:00   |
|Number of pages | <code> page </code>   |No |  Int(8) | Default value is 1   |
|Number of items displayed per page | <code> page_size </code> |No |  Int(8) | By default 10 transactions will be displayed. The maximum <code>page_size</code> value is 100  |


### Response Parameters


|Parameter name|Parameter code|Parameter type|Description|
|----    |------|------  |------   |
| Page number| <code>page</code>  |  | Int(8)  |  |
| Request result description| <code>resperr</code> | | String(128) ||
| Diplay number of items per page| <code>page_size</code>  |  | Int(8)  |  |
| Request result code | <code>respcd</code>   |  | String(4)  |0000 - Interface call succeeded  |
| Query result | <code>data</code> | | JSON |
| QFPay transaction number   |  <code>syssn</code>  |String(40) |  |
| API order number |  <code>out_trade_no</code> | String(128) | External transaction number / Merchant platform transaction number | 
| Payment type | <code>pay_type</code> | String(6) | Please refer to the page “Payment status codes” for a complete list of payment types |
| Order Type |  <code>order_type</code> |  String(16) | Payment: Payment transaction Refund: Refund transaction |
| Request transaction time | <code>txdtm</code> | String(20) | Request transaction time provided by merchant in payment and refund request. Format: YYYY-MM-DD hh&#58;mm:ss |
| Transaction amount | <code>txamt</code> | Int(11) |  Amount of the transaction. Unit in cents (i.e. 100 = $1) |
| System transaction time | <code>sysdtm</code> | String(20) |  Format: YYYY-MM-DD hh&#58;mm:ss |
| Cancellation or refund indicator | <code>cancel</code> | String(1) |  Transaction cancel status: <br> 0 = Not cancelled <br> 1 = For CPM: Transaction reversed or refunded successfully <br> 2 = For MPM: Transaction canceled successfully <br> 3 = Transaction refunded <br> 4 = Alipay Preauth order finished <br> 5 = Transaction partially refunded |
| Payment status |  <code>respcd</code> | String(4) | 0000 = transaction succeeded <br> 1143/1145 = Please wait to evaluate the transaction status. All other response codes indicate transaction failure. |
| Payment Status message | <code>errmsg</code> | String(128) | Payment result description |


## Account Statement 

The clearing statement for a particular payment channel is downloaded regularly. Additional requests can only be made in the production environment. The system response is in form of a compressed zip file. Data is based on the selected payment channel and contains all merchants therefore the <code>mchid</code> cannot be passed in as a request parameter.


## API Endpoint for Account Statement

### HTTP Request

`GET ../download/v1/trade_bill`

### Request Parameter

|Request code | Mandatory | Parameter type | Description
|----    |---|----- |-----   |
| <code>trade_date</code> | Yes | String(10) | Get a specific account statement for the selected date. Example: 2017-10-17


# Refunds

<aside class="success">
Refunds can be initiated in our Merchant App, in the Merchant Management System (MMS) and through the API.
</aside>

## API Endpoint for Refunds

```plaintext
Request Header:

{
  Content-Type: application/x-www-form-urlencoded;
  X-QF-APPCODE: D5589D2A1F2E42A9A60C37**********
  X-QF-SIGN: 6FB43AC29175B4602FF95F8332028F19
}

Request Body:

{
  txamt=10&syssn=20191227000200020061752831&out_trade_no=12345678&txdtm=2019-12-27 10:39:39&key=0E32A59A8B454940A2FF39**********&mchid=ZaMVg*****
}

```


```python
import urllib.request, urllib.parse, urllib.error, urllib.request, urllib.error, urllib.parse, hashlib
import requests
from hashids import Hashids
import datetime
import string
import random

# Enter Client Credentials
environment = 'https://openapi-test.qfpay.com'
app_code = 'D5589D2A1F2E42A9A60C37**********'
client_key = '0E32A59A8B454940A2FF39**********'


# Create parameter values for data payload
current_time = datetime.datetime.now().replace(microsecond=0)         
random_string = ''.join(random.choices(string.ascii_uppercase + string.digits, k=32))                       
  

# Create signature
def make_req_sign(data, key):
    keys = list(data.keys())
    keys.sort()
    p = []
    for k in keys: 
        v = data[k]
        p.append('%s=%s'%(k,v))
    unsign_str = ('&'.join(p) + key).encode("utf-8")
    s = hashlib.md5(unsign_str).hexdigest()
    return s.upper()


# Body payload
txamt = '10' #Partial or full refund amount
syssn = '20191227000200020061752831' #Original transaction number
out_trade_no = random_string
txdtm = current_time 
key = client_key
mchid = 'ZaMVg*****'


#data ={'txamt': txamt, 'syssn': syssn, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'udid': udid, 'auth_code': auth_code, 'mchid': mchid, 'auth_code': auth_code}
data ={'mchid': mchid, 'txamt': txamt, 'syssn': syssn,  'out_trade_no': out_trade_no, 'txdtm': txdtm}

r = requests.post(environment+"/trade/v1/refund",data=data,headers={'X-QF-APPCODE':app_code,'X-QF-SIGN':make_req_sign(data, key)})

print(r.json())
```

```java
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;


public class Refund {
    public static void main(String args[]){
        String appcode="D5589D2A1F2E42A9A60C37**********";
        String key="0E32A59A8B454940A2FF39**********";
        String mchid="ZaMVg*****"; // Only Agents must provide the mchid

        String out_trade_no= "22333444455555";
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date=df.format(new Date());
        String txdtm=date;
        String txamt="15";
        String syssn="20191227000300020061662295";
         //如果是国内钱台，产品名称对应的字段是goods_name，不是product_name.
         //String product_name="Test Name";


        Map<String, String> unsortMap = new HashMap<>();
        unsortMap.put("mchid", mchid);
        unsortMap.put("txamt", txamt);
        unsortMap.put("syssn", syssn);
        unsortMap.put("out_trade_no", out_trade_no);
        unsortMap.put("txdtm", txdtm);

        String data=QFPayUtils.getDataString(unsortMap);
        System.out.println("Data:\n"+data+key);
        String md5Sum=QFPayUtils.getMd5Value(data+key);
        System.out.println("Md5 Value:\n"+md5Sum);

         //如果是国内钱台，网址是：https://openapi-test.qfpay.com.
        String url="https://openapi-test.qfpay.com";
        String resp= Requests.sendPostRequest(url+"/trade/v1/refund", data, appcode,key);
        System.out.println(resp);
    }
}
```

```javascript
// Enter Client Credentials
const environment = 'https://openapi-test.qfpay.com'
const app_code = 'D5589D2A1F2E42A9A60C37**********'
const client_key = '0E32A59A8B454940A2FF3***********'

// Generate Timestamp
var dateTime = new Date().toISOString().replace(/T/, ' ').replace(/\..+/, '')
console.log(dateTime)

// Body Payload
const key = client_key
var tradenumber = String(Math.round(Math.random() * 1000000000))
console.log(tradenumber)

var payload = {
'syssn': '20191231000300020063521806',
'txamt': '10',
'out_trade_no': tradenumber,
'txdtm': dateTime,
'mchid': 'ZaMVg*****'
};

// Signature Generation
const ordered = {};
Object.keys(payload).sort().forEach(function(key) {
  ordered[key] = payload[key] });
console.log(ordered)

var str = [];
for (var p in ordered)
if (ordered.hasOwnProperty(p)) {
str.push((p) + "=" + (ordered[p]));
}
var string = str.join("&")+client_key;
console.log(string)

const crypto = require('crypto')
var hashed = crypto.createHash('md5').update(string).digest('hex')
console.log(hashed)


// API Request
var request = require("request");
request({
  uri: environment+"/trade/v1/refund",
  headers: {
    'X-QF-APPCODE': app_code,
    'X-QF-SIGN': hashed
  },
  method: "POST",
  form: payload,
  }, 
  function(error, response, body) {
  console.log(body);
});
```

> The above command returns JSON structured like this:

```json
{
"orig_syssn": "20191227000200020061752831", 
"sysdtm": "2019-12-27 11:11:23", 
"paydtm": "2019-12-27 11:11:26", 
"txdtm": "2019-12-27 11:10:38", 
"udid": "qiantai2", 
"txcurrcd": "EUR", 
"txamt": "10", 
"resperr": "success", 
"respmsg": "", 
"out_trade_no": "RGNOEIVU9JZLNP9GGYXWXCW7OEMI720F", 
"syssn": "20191227000300020061652643", 
"respcd": "0000", 
"chnlsn": "2019122722001411461404119764", 
"cardcd": ""
}
```

### HTTP Request

`POST ../trade/v1/refund`

Merchants can use the refund interface to refund transactions. The merchant account must have a sufficient transaction amount on the same trading day in order to refund transactions. The maximum refund amount for a transaction must not exceed to original payment amount. Unless otherwise specified, once a refund request is submitted and accepted, it is not reversible. The refund capability and the maximum time period for refund varies across payment channels. Please contact your QFPay support representative for more information.



### Request Parameters

|Parameter name|Parameter code|Mandatory|Parameter type|Description|
|----    |---|----- |-----   |-----   |
|QF Pay transaction number | <code> syssn </code> |Yes |String(128)  | Original transaction ID <code> syssn </code>  that is supposed to be refunded|
|API order number | <code> out_trade_no </code>  |Yes |String(128)  | External refund transaction number / Merchant platform refund transaction number: This parameter must be unique for each payment and refund request under the same merchant account in the system.|
|Refund amount | <code> txamt </code>   |Yes |Int(11)  | Amount of the refund. Unit in cents (i.e. 100 = $1) <br> Required for both full refund and partial refund. Some payment channel may not support partial refund.|
|Transaction request time | <code> txdtm </code>   |Yes |String(20) |Format: YYYY-MM-DD hh&#58;mm:ss|
|Merchant ID | <code> mchid </code>  |No |String(16)  | May or may not be given to merchant. If MCHID is given, it is mandatory to provide the MCHID. On the contrary, if MCHID is not provided, merchants shall not pass the MCHID field in the API request. |
|Transaction time | <code> txzone </code>   |No |String(5)  |Used to record the local transaction time. The default is Beijing time UTC +08:00|
|Device ID | <code> udid </code>    |No |String(40)  |Unique transaction device ID|



### Response Parameters

|Parameter name|Parameter code|Parameter type|Description|
|-----    |----|------ |-----   |-----   |
|Refund Transaction ID | <code> syssn </code>  |String(40)   |New transaction ID referring to the newly created refund transaction|
|Original Transaction ID| <code> orig_syssn </code>  |String(128)   |Previous transaction ID referring to the original transaction that has been refunded|
|Refund amount| <code> txamt </code>   |Int(11)  | Amount of the refund. Unit in cents (i.e. 100 = $1)|
|System transaction time | <code> sysdtm </code>  | String(20)  |Format: YYYY-MM-DD hh&#58;mm:ss|
|Return code| <code> respcd </code> |  String(4)|  0000-Request successful.<br>1143/1145 - merchants are required to continue to query the transaction result. <br/>All other return codes indicate transaction failure. Please refer to the page Payment status codes for a complete list of payment types.|
|Response message| <code> resperr </code> |  String(128)| |


